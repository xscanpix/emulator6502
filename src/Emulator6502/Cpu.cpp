#include "Cpu.h"

#include <assert.h>

namespace Emulator
{
    void Cpu::ADC_IMM(const Instruction &) { assert(false); }
    void Cpu::ADC_ZP(const Instruction &) { assert(false); }
    void Cpu::ADC_ZPX(const Instruction &) { assert(false); }
    void Cpu::ADC_ABS(const Instruction &) { assert(false); }
    void Cpu::ADC_ABSX(const Instruction &) { assert(false); }
    void Cpu::ADC_ABSY(const Instruction &) { assert(false); }
    void Cpu::ADC_INDX(const Instruction &) { assert(false); }
    void Cpu::ADC_INDY(const Instruction &) { assert(false); }
    void Cpu::AND_IMM(const Instruction &) { assert(false); }
    void Cpu::AND_ZP(const Instruction &) { assert(false); }
    void Cpu::AND_ZPX(const Instruction &) { assert(false); }
    void Cpu::AND_ABS(const Instruction &) { assert(false); }
    void Cpu::AND_ABSX(const Instruction &) { assert(false); }
    void Cpu::AND_ABSY(const Instruction &) { assert(false); }
    void Cpu::AND_INDX(const Instruction &) { assert(false); }
    void Cpu::AND_INDY(const Instruction &) { assert(false); }
    void Cpu::ASL_A(const Instruction &) { assert(false); }
    void Cpu::ASL_ZP(const Instruction &) { assert(false); }
    void Cpu::ASL_ZPX(const Instruction &) { assert(false); }
    void Cpu::ASL_ABS(const Instruction &) { assert(false); }
    void Cpu::ASL_ABSX(const Instruction &) { assert(false); }
    void Cpu::BCC(const Instruction &) { assert(false); }
    void Cpu::BCS(const Instruction &) { assert(false); }
    void Cpu::BEQ(const Instruction &) { assert(false); }
    void Cpu::BMI(const Instruction &) { assert(false); }
    void Cpu::BNE(const Instruction &) { assert(false); }
    void Cpu::BPL(const Instruction &) { assert(false); }
    void Cpu::BVC(const Instruction &) { assert(false); }
    void Cpu::BVS(const Instruction &) { assert(false); }
    void Cpu::BIT_ZP(const Instruction &) { assert(false); }
    void Cpu::BIT_ABS(const Instruction &) { assert(false); }
    void Cpu::BRK(const Instruction &) { assert(false); }
    void Cpu::CLC(const Instruction &) { assert(false); }
    void Cpu::CLD(const Instruction &) { assert(false); }
    void Cpu::CLI(const Instruction &) { assert(false); }
    void Cpu::CLV(const Instruction &) { assert(false); }
    void Cpu::CMP_IMM(const Instruction &) { assert(false); }
    void Cpu::CMP_ZP(const Instruction &) { assert(false); }
    void Cpu::CMP_ZPX(const Instruction &) { assert(false); }
    void Cpu::CMP_ABS(const Instruction &) { assert(false); }
    void Cpu::CMP_ABSX(const Instruction &) { assert(false); }
    void Cpu::CMP_ABSY(const Instruction &) { assert(false); }
    void Cpu::CMP_INDX(const Instruction &) { assert(false); }
    void Cpu::CMP_INDY(const Instruction &) { assert(false); }
    void Cpu::CPX_IMM(const Instruction &) { assert(false); }
    void Cpu::CPX_ZP(const Instruction &) { assert(false); }
    void Cpu::CPX_ABS(const Instruction &) { assert(false); }
    void Cpu::CPY_IMM(const Instruction &) { assert(false); }
    void Cpu::CPY_ZP(const Instruction &) { assert(false); }
    void Cpu::CPY_ABS(const Instruction &) { assert(false); }
    void Cpu::DEC_ZP(const Instruction &) { assert(false); }
    void Cpu::DEC_ZPX(const Instruction &) { assert(false); }
    void Cpu::DEC_ABS(const Instruction &) { assert(false); }
    void Cpu::DEC_ABSX(const Instruction &) { assert(false); }
    void Cpu::DEX(const Instruction &) { assert(false); }
    void Cpu::DEY(const Instruction &) { assert(false); }
    void Cpu::EOR_IMM(const Instruction &) { assert(false); }
    void Cpu::EOR_ZP(const Instruction &) { assert(false); }
    void Cpu::EOR_ZPX(const Instruction &) { assert(false); }
    void Cpu::EOR_ABS(const Instruction &) { assert(false); }
    void Cpu::EOR_ABSX(const Instruction &) { assert(false); }
    void Cpu::EOR_ABSY(const Instruction &) { assert(false); }
    void Cpu::EOR_INDX(const Instruction &) { assert(false); }
    void Cpu::EOR_INDY(const Instruction &) { assert(false); }
    void Cpu::INC_ZP(const Instruction &) { assert(false); }
    void Cpu::INC_ZPX(const Instruction &) { assert(false); }
    void Cpu::INC_ABS(const Instruction &) { assert(false); }
    void Cpu::INC_ABSX(const Instruction &) { assert(false); }
    void Cpu::INX(const Instruction &) { assert(false); }
    void Cpu::INY(const Instruction &) { assert(false); }
    void Cpu::JMP_ABS(const Instruction &) { assert(false); }
    void Cpu::JMP_IND(const Instruction &) { assert(false); }
    void Cpu::JSR(const Instruction &) { assert(false); }
    void Cpu::LDA_IMM(const Instruction &) { assert(false); }
    void Cpu::LDA_ZP(const Instruction &) { assert(false); }
    void Cpu::LDA_ZPX(const Instruction &) { assert(false); }
    void Cpu::LDA_ABS(const Instruction &) { assert(false); }
    void Cpu::LDA_ABSX(const Instruction &) { assert(false); }
    void Cpu::LDA_ABSY(const Instruction &) { assert(false); }
    void Cpu::LDA_INDX(const Instruction &) { assert(false); }
    void Cpu::LDA_INDY(const Instruction &) { assert(false); }
    void Cpu::LDX_IMM(const Instruction &) { assert(false); }
    void Cpu::LDX_ZP(const Instruction &) { assert(false); }
    void Cpu::LDX_ZPY(const Instruction &) { assert(false); }
    void Cpu::LDX_ABS(const Instruction &) { assert(false); }
    void Cpu::LDX_ABSY(const Instruction &) { assert(false); }
    void Cpu::LDY_IMM(const Instruction &) { assert(false); }
    void Cpu::LDY_ZP(const Instruction &) { assert(false); }
    void Cpu::LDY_ZPX(const Instruction &) { assert(false); }
    void Cpu::LDY_ABS(const Instruction &) { assert(false); }
    void Cpu::LDY_ABSX(const Instruction &) { assert(false); }
    void Cpu::LSR_A(const Instruction &) { assert(false); }
    void Cpu::LSR_ZP(const Instruction &) { assert(false); }
    void Cpu::LSR_ZPX(const Instruction &) { assert(false); }
    void Cpu::LSR_ABS(const Instruction &) { assert(false); }
    void Cpu::LSR_ABSX(const Instruction &) { assert(false); }
    void Cpu::NOP(const Instruction &) { assert(false); }
    void Cpu::ORA_IMM(const Instruction &) { assert(false); }
    void Cpu::ORA_ZP(const Instruction &) { assert(false); }
    void Cpu::ORA_ZPX(const Instruction &) { assert(false); }
    void Cpu::ORA_ABS(const Instruction &) { assert(false); }
    void Cpu::ORA_ABSX(const Instruction &) { assert(false); }
    void Cpu::ORA_ABSY(const Instruction &) { assert(false); }
    void Cpu::ORA_INDX(const Instruction &) { assert(false); }
    void Cpu::ORA_INDY(const Instruction &) { assert(false); }
    void Cpu::PHA(const Instruction &) { assert(false); }
    void Cpu::PHP(const Instruction &) { assert(false); }
    void Cpu::PLA(const Instruction &) { assert(false); }
    void Cpu::PLP(const Instruction &) { assert(false); }
    void Cpu::ROL_A(const Instruction &) { assert(false); }
    void Cpu::ROL_ZP(const Instruction &) { assert(false); }
    void Cpu::ROL_ZPX(const Instruction &) { assert(false); }
    void Cpu::ROL_ABS(const Instruction &) { assert(false); }
    void Cpu::ROL_ABSX(const Instruction &) { assert(false); }
    void Cpu::ROR_A(const Instruction &) { assert(false); }
    void Cpu::ROR_ZP(const Instruction &) { assert(false); }
    void Cpu::ROR_ZPX(const Instruction &) { assert(false); }
    void Cpu::ROR_ABS(const Instruction &) { assert(false); }
    void Cpu::ROR_ABSX(const Instruction &) { assert(false); }
    void Cpu::RTI(const Instruction &) { assert(false); }
    void Cpu::RTS(const Instruction &) { assert(false); }
    void Cpu::SBC_IMM(const Instruction &) { assert(false); }
    void Cpu::SBC_ZP(const Instruction &) { assert(false); }
    void Cpu::SBC_ZPX(const Instruction &) { assert(false); }
    void Cpu::SBC_ABS(const Instruction &) { assert(false); }
    void Cpu::SBC_ABSX(const Instruction &) { assert(false); }
    void Cpu::SBC_ABSY(const Instruction &) { assert(false); }
    void Cpu::SBC_INDX(const Instruction &) { assert(false); }
    void Cpu::SBC_INDY(const Instruction &) { assert(false); }
    void Cpu::SEC(const Instruction &) { assert(false); }
    void Cpu::SED(const Instruction &) { assert(false); }
    void Cpu::SEI(const Instruction &) { assert(false); }
    void Cpu::STA_ZP(const Instruction &) { assert(false); }
    void Cpu::STA_ZPX(const Instruction &) { assert(false); }
    void Cpu::STA_ABS(const Instruction &) { assert(false); }
    void Cpu::STA_ABSX(const Instruction &) { assert(false); }
    void Cpu::STA_ABSY(const Instruction &) { assert(false); }
    void Cpu::STA_INDX(const Instruction &) { assert(false); }
    void Cpu::STA_INDY(const Instruction &) { assert(false); }
    void Cpu::STX_ZP(const Instruction &) { assert(false); }
    void Cpu::STX_ZPY(const Instruction &) { assert(false); }
    void Cpu::STX_ABS(const Instruction &) { assert(false); }
    void Cpu::STY_ZP(const Instruction &) { assert(false); }
    void Cpu::STY_ZPX(const Instruction &) { assert(false); }
    void Cpu::STY_ABS(const Instruction &) { assert(false); }
    void Cpu::TAX(const Instruction &) { assert(false); }
    void Cpu::TAY(const Instruction &) { assert(false); }
    void Cpu::TSX(const Instruction &) { assert(false); }
    void Cpu::TXA(const Instruction &) { assert(false); }
    void Cpu::TXS(const Instruction &) { assert(false); }
    void Cpu::TYA(const Instruction &) { assert(false); }
    void Cpu::Undocumented(const Instruction &) { assert(false); }
}